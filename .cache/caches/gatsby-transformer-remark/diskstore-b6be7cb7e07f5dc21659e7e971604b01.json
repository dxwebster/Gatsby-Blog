{"expireTime":9007200853391800000,"key":"transformer-remark-markdown-html-8a05edeb1a9ab90a66a046da43485406-gatsby-remark-relative-imagesgatsby-remark-imagesgatsby-remark-copy-linked-files-","val":"<p><img src=\"/img/flavor_wheel.jpg\" alt=\"flavor wheel\"></p>\n<h1>O que √© o Node.js</h1>\n<ul>\n<li>Basicamente √© a utiliza√ß√£o de Javascript no back-end</li>\n<li>N√£o lidamos com eventos do usu√°rio final (clicks em bot√µes, passar mouse)</li>\n<li>Lidamos com eventos atrav√©s de rotas e integra√ß√µes (endere√ßos da aplica√ß√£o)</li>\n<li>N√£o √© linguagem, √© uma plataforma para desenvolvimento back-end</li>\n<li>Constru√≠do em cima da V8 (engine que roda por tr√°s do Chrome que interpreta o JS)</li>\n<li>Compar√°vel a PHP / Ruby / Python / Go</li>\n<li>No back-end, utilizamos o node de forma direta, as aplica√ß√µes ReactJS e React Native utilizam de forma indireta para compilar arquivos e executar processos na m√°quina do desenvolvedor</li>\n<li>Possui um fluxo totalmente linear, a aplica√ß√£o √© executada de cima pra baixo na ordem de escrita do c√≥digo</li>\n</ul>\n<h1>O que √© NPM ou YARN</h1>\n<ul>\n<li>Gerenciadores de pacotes do Node</li>\n<li>Permite instalar ferramentas de terceiros</li>\n<li>Fornece bibliotecas para outras pessoas</li>\n<li>O Yarn √© mais r√°pido e mais  funcional que o NPM</li>\n<li>Compar√°vel a Composer do PHP, Gems do Ruby</li>\n</ul>\n<h1>Caracter√≠sticas do Node</h1>\n<ul>\n<li>Segue uma arquitetura diferenciada das tradicionais:</li>\n</ul>\n<h2>üí°Arquitetura Event-Loop</h2>\n<ul>\n<li>Baseada em eventos (Rotas na maioria das vezes)</li>\n<li>Call Stack, pilha de eventos (fun√ß√£o disparada pelo c√≥digo), o node processa atrav√©s de um loop eterno (while) rodando na aplica√ß√£o sem parar, vendo se tem outra nova fun√ß√£o disparada pela aplica√ß√£o e a√≠ executa em formato de pilha.</li>\n<li>LAST IN, FIRST OUT (LIFO): A fun√ß√£o que vier mais tarde (a que entrar), vai ser a primeira processada (a que vai sair).</li>\n</ul>\n<h2>üí°Single-thread</h2>\n<ul>\n<li>Executa apenas em 1 thred do processador. Um processador de 4 cores n√£o executa ao mesmo tempo nos 4, o processo dele fica alocado em apenas 1 core no processamento.</li>\n<li>Node utiliza v√°rias libs do C++ por tr√°s, a mais famosa √© libuv (utilizado por processos de scripts modernos), permite utilizar multi-threads nos processamentos (backgroung threds).</li>\n</ul>\n<h2>üí°Non-blocking I/O</h2>\n<ul>\n<li>Input e Output n√£o bloqueante</li>\n<li>Quando fazemos uma requisi√ß√£o pro node, n√£o preciso retornar todos os dados de uma s√≥ vez. Assim que o front faz uma requisi√ß√£o pro back-end, ele mant√©m a conex√£o com o servidor aberta para receber cada vez mais requisi√ß√µes. ex: Nos chats, a requisi√ß√£o nunca se fecha, as mensagens sempre v√£o chegando.</li>\n</ul>\n<h1>HTTP codes</h1>\n<p>Servidor HTTP: consegue ouvir requisi√ß√µes de um usu√°rio e executar respostas.</p>\n<p>Toda resposta que o back-end retorna, vem junto um c√≥digo de 3 d√≠gitos que significa o status da resposta, se deu erro ou n√£o por exemplo.</p>\n<h2>üí°1xx: Informational</h2>\n<p>Informativo, apenas o papel de passar uma informa√ß√£o, quase nunca utilizado</p>\n<h2>üí°2xx: Success</h2>\n<p>C√≥digos de sucesso, que deu tudo certo</p>\n<ul>\n<li>200 success</li>\n<li>201 created</li>\n</ul>\n<h2>üí°3xx: Redirection</h2>\n<p>Quando chama uma URL e acontece um redirecionamento </p>\n<ul>\n<li>301: Moved Permanently (a URL mudou permanentemente)</li>\n<li>302: Moved (a URL mudou mas pode voltar)</li>\n</ul>\n<h2>üí°4xx: Client Error</h2>\n<p>Quando enviou algum tipo de informa√ß√£o errada, acessou um rota que n√£o existe, n√£o se autenticou, tem alguam coisa faltando na requisi√ß√£o pro servidor</p>\n<ul>\n<li>401: Bad Request (back-end esperava uma informa√ß√£o e n√£o teve)</li>\n<li>401: Unauthorized (n√£o est√° autorizado para fazer o que esta tentando, ex: faltou estar logado)</li>\n<li>404: Not Found (a rota n√£o foi encontrada)</li>\n</ul>\n<h2>üí°5xx: Server Error</h2>\n<p>Erros do back-end. Apesar do front-end ter enviado tudo certo, n√£o foi poss√≠vel formatar a resposta pelo back-end.</p>\n<ul>\n<li>500: Internal Server Erro</li>\n</ul>"}